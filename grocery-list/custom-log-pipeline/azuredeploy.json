{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspaceName": {
            "type": "string",
            "metadata": {
                "description": "Name for the Log Analytics workspace used to aggregate data"
            }
        },
        "pricingTier": {
            "type": "string",
            "allowedValues": [
                "PerGB2018",
                "Free",
                "Standalone",
                "PerNode",
                "Standard",
                "Premium"
            ],
            "defaultValue": "PerGB2018",
            "metadata": {
                "description": "Pricing tier: pergb2018 or legacy tiers (Free, Standalone, PerNode, Standard or Premium) which are not available to all customers."
            }
        },
        "dataRetention": {
            "type": "int",
            "defaultValue": 30,
            "minValue": 7,
            "maxValue": 730,
            "metadata": {
                "description": "Number of days of retention. Workspaces in the legacy Free pricing tier can only have 7 days."
            }
        },
        "immediatePurgeDataOn30Days": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "If set to true when changing retention to 30 days, older data will be immediately deleted. Use this with extreme caution. This only applies when retention is being set to 30 days."
            }
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Username for the Virtual Machines (Windows, Linux)."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Password for all Virtual Machines (Windows , Linux). If you want to enable SSH key authentication for Linux virtual machines, make sure you set the 'linuxAuthenticationType' parameter to 'sshPublicKey' and provide the SSH Public Key string via the 'linuxAdminKey' parameter."
            }
        },
        "linuxAuthenticationType": {
            "type": "string",
            "defaultValue": "password",
            "allowedValues": [
                "sshPublicKey",
                "password"
            ],
            "metadata": {
                "description": "Type of authentication to use on the Linux Virtual Machine. SSH key is recommended."
            }
        },
        "linuxAdminKey": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "SSH Key to authenticate against Linux Virtual Machines. Provide the SSH rsa public key file as a string. Use \"ssh-keygen -t rsa -b 2048\" to generate your SSH key pairs."
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_B2s",
            "allowedValues": [
                "Standard_A2",
                "Standard_A3",
                "Standard_B2s",
                "Standard_B2ms",
                "Standard_A2_v2",
                "Standard_A4_v2"
            ],
            "metadata": {
                "description": "Size of the virtual machine. Reference: https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-general"
            }
        },
        "allowedIPAddresses": {
            "type": "string",
            "metadata": {
                "description": "The sourceAddressPrefixes allowed to connect to this deployment"
            },
            "defaultValue": "*"
        },
        "addMordorDatasets": {
            "type": "string",
            "defaultValue": "NoItems",
            "allowedValues": [
                "NoItems",
                "mordor-small-datasets(1.1GB)",
                "mordor-large-apt29(2.0GB)"
            ],
            "metadata": {
                "description": "Do you want to deploy additional resources and connect them to your current Azure Sentinel's workspace?"
            }
        },
        "deployCustomLogsPipeline": {
            "type": "string",
            "defaultValue": "NoPipe",
            "allowedValues": [
                "NoPipe",
                "Logstash",
                "Logstash-EventHub"
            ],
            "metadata": {
                "description": "Do you want to deploy a data ingestion pipeline along with an Azure Sentinel solution? Events get sent to a custom logs table named prerecorded. You also have the option to deploy the pipeline with pre-recorded datasets from the Mordor project (https://mordordatasets.com)"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        }
    },
    "variables": {
        "artifactsBlacksmithLocation": "https://raw.githubusercontent.com/hunters-forge/Blacksmith/master/",
        "artifactsAzureSentinel2Go": "https://raw.githubusercontent.com/OTRF/Azure-Sentinel2Go/master/",
        "customScriptTemplateUri": "[uri(variables('artifactsAzureSentinel2Go'), 'azure-sentinel/linkedtemplates/customScript.json')]"
    },
    "resources": [
        {
            "name": "deployAzureSentinel2Go",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri('https://raw.githubusercontent.com/OTRF/','Azure-Sentinel2Go/master/azure-sentinel/azuredeploy.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "workspaceName": {
                        "value": "[parameters('workspaceName')]"
                    },
                    "pricingTier": {
                        "value": "[parameters('pricingTier')]"
                    },
                    "dataRetention": {
                        "value": "[parameters('dataRetention')]"
                    },
                    "immediatePurgeDataOn30Days": {
                        "value": "[parameters('immediatePurgeDataOn30Days')]"
                    }
                }
            }
        },
        {
            "condition": "[contains(parameters('deployCustomLogsPipeline'), 'Logstash')]",
            "name": "deployLogstashVM",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(variables('artifactsBlacksmithLocation'), 'templates/azure/LinuxVM/azuredeploy.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vmSize": {
                        "value": "[parameters('vmSize')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "authenticationType": {
                        "value": "[parameters('linuxAuthenticationType')]"
                    },
                    "adminPasswordOrKey": {
                        "value": "[if(equals(parameters('linuxAuthenticationType'), 'password'), parameters('adminPassword'), parameters('linuxAdminKey'))]"
                    },
                    "allowedIPAddresses": {
                        "value": "[parameters('allowedIPAddresses')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "condition": "[contains(parameters('deployCustomLogsPipeline'), 'EventHub')]",
            "name": "deployEventHub",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(variables('artifactsBlacksmithLocation'), 'templates/azure/EventHub/azuredeploy.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "projectName": {
                        "value": "AZSentinelPipe"
                    },
                    "eventHubSku": {
                        "value": "Standard"
                    }
                }
            }
        },
        {
            "condition": "[contains(parameters('deployCustomLogsPipeline'), 'Logstash')]",
            "name": "customLogsPipeline",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "dependsOn": [
                "deployAzureSentinel2Go",
                "deployLogstashVM",
                "deployEventHub"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('customScriptTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "extensionName": {
                        "value": "SetupLogstash"
                    },
                    "commandToExecute": {
                        "value": "[concat('bash Install-Logstash.sh -i', ' ', reference('deployAzureSentinel2Go').outputs.workspaceIdOutput.value, ' ', '-k', ' ', reference('deployAzureSentinel2Go').outputs.workspaceKeyOutput.value, ' ', '-u', ' ', parameters('adminUsername'), if(contains(parameters('deployCustomLogsPipeline'), 'EventHub'), concat(' ', '-c', ' ', '\"', reference('deployEventHub').outputs.NamespaceConnectionString.value, '\"', ' ', '-e', ' ', reference('deployEventHub').outputs.EventHubName.value), ''))]"
                    },
                    "fileUris": {
                        "value": [
                            "[uri(variables('artifactsAzureSentinel2Go'), 'grocery-list/custom-log-pipeline/scripts/Install-Logstash.sh')]"
                        ]
                    },
                    "vmName": {
                        "value": "[if(contains(parameters('deployCustomLogsPipeline'), 'Logstash'), reference('deployLogstashVM').outputs.vmName.value, 'Resource not deployed')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "condition": "[or(contains(parameters('addMordorDatasets'), 'mordor-small-datasets(1.1GB)'), contains(parameters('addMordorDatasets'), 'mordor-large-apt29(2.0GB)'))]",
            "name": "importMordorDatasets",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "dependsOn": [
                "customLogsPipeline"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('customScriptTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "extensionName": {
                        "value": "SetupLogstash"
                    },
                    "commandToExecute": {
                        "value": "[concat('bash Get-Mordor.sh -d', ' ', if(contains(parameters('addMordorDatasets'), 'mordor-small-datasets(1.1GB)'),'SMALL_DATASETS', 'LARGE_APT29' ))]"
                    },
                    "fileUris": {
                        "value": [
                            "[uri(variables('artifactsAzureSentinel2Go'), 'grocery-list/custom-log-pipeline/scripts/Get-Mordor.sh')]"
                        ]
                    },
                    "vmName": {
                        "value": "[if(contains(parameters('deployCustomLogsPipeline'), 'Logstash'), reference('deployLogstashVM').outputs.vmName.value, 'Resource not deployed')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        }
    ],
    "outputs": {
    }
}