{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "utcValue": {
            "type": "string",
            "metadata": {
                "description": "Returns the current (UTC) datetime value in the specified format. If no format is provided, the ISO 8601 (yyyyMMddTHHmmssZ) format is used"
            },
            "defaultValue": "[utcNow()]"
        },
        "numberOfWorkstations": {
            "type": "int",
            "defaultValue": 2,
            "minValue": 1,
            "maxValue": 100,
            "metadata": {
                "description": "Number of VMs to deploy"
            }
        },
        "c2Framework": {
            "type": "string",
            "defaultValue": "",
            "allowedValues": [
                "empire",
                "covenant",
                "shad0w",
                ""
            ],
            "metadata": {
                "description": "C2 framework to deploy"
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for all Virtual Machines."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for all Virtual Machines. If you want to enable SSH key authentication for Linux virtual machines, make sure you set the 'linuxAuthenticationType' parameter to 'sshPublicKey' and provide the SSH Public Key string via the 'linuxAdminKey' parameter."
            }
        },
        "linuxAuthenticationType": {
            "type": "string",
            "defaultValue": "password",
            "allowedValues": [
                "sshPublicKey",
                "password"
            ],
            "metadata": {
                "description": "Type of authentication to use on the Linux Virtual Machine. SSH key is recommended."
            }
        },
        "linuxAdminKey": {
            "type": "securestring",
            "metadata": {
                "description": "SSH Key to authenticate against Linux Virtual Machines. Provide the SSH rsa public key file as a string. Use \"ssh-keygen -t rsa -b 2048\" to generate your SSH key pairs."
            },
            "defaultValue": ""
        },
        "windowsDesktopSKU": {
            "type": "string",
            "defaultValue": "19h2-pro",
            "metadata": {
                "description": "The Windows virtual machine release distribution. (e.g. Version 1903 -> 19h1)"
            }
        },
        "windowsDesktopVersion": {
            "type": "string",
            "defaultValue": "latest"
        },
        "windowsDesktopVmSize": {
            "type": "string",
            "defaultValue": "Standard_B2s",
            "allowedValues": [
                "Standard_B2s",
                "Standard_A3"
            ],
            "metadata": {
                "description": "Size of the virtual machine. Reference: https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-general"
            }
        },
        "windowsServerSKU": {
            "type": "string",
            "defaultValue": "2019-Datacenter",
            "allowedValues": [
                "2019-Datacenter"
            ],
            "metadata": {
                "description": "The Windows version for the Server VM. This will pick a fully patched image of this given Windows version."
            }
        },
        "windowsServerVersion": {
            "type": "string",
            "defaultValue": "latest",
            "allowedValues": [
                "latest"
            ]
        },
        "windowsServerVmSize": {
            "type": "string",
            "defaultValue": "Standard_B2s",
            "allowedValues": [
                "Standard_B2s",
                "Standard_A3"
            ],
            "metadata": {
                "description": "Size of the virtual machine."
            }
        },
        "ubuntuSKU": {
            "type": "string",
            "defaultValue": "18.04-LTS",
            "allowedValues": [
                "12.04.5-LTS",
                "14.04.5-LTS",
                "16.04.0-LTS",
                "18.04-LTS",
                "19.04"
            ],
            "metadata": {
                "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version."
            }
        },
        "linuxVmSize": {
            "type": "string",
            "defaultValue": "Standard_B2s",
            "allowedValues": [
                "Standard_B2s",
                "Standard_A3"
            ],
            "metadata": {
                "description": "Size of the virtual machine. Reference: https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-general"
            }
        },
        "_artifactsLocation": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/OTRF/mordor-labs/master/",
            "metadata": {
                "description": "The location of resources, such as templates and DSC modules, that the template depends on"
            }
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Auto-generated token to access _artifactsLocation. Leave it blank unless you need to provide your own value."
            }
        },
        "domainFQDN": {
            "type": "string",
            "defaultValue": "azsentinel.local",
            "metadata": {
                "description": "The FQDN of the Active Directory Domain to be created"
            }
        },
        "domainJoinOptions": {
            "type": "int",
            "defaultValue": 3,
            "metadata": {
                "description": "Set of bit flags that define the join options. Default value of 3 is a combination of NETSETUP_JOIN_DOMAIN (0x00000001) & NETSETUP_ACCT_CREATE (0x00000002) i.e. will join the domain and create the account on the domain. For more information see https://msdn.microsoft.com/en-us/library/aa392154(v=vs.85).aspx"
            }
        },
        "accessMode": {
            "type": "string",
            "metadata": {
                "description": "Are you planning on a) allowing access to your environment from one Public IP or b) deploy a point-to-site (P2S) VPN for it. If a) Set the allowedIPAddresses parameter, else b) Set clientRootCertName and clientRootCertData parameters "
            },
            "allowedValues": [
                "allowedIPAddress",
                "pointToSiteVPN"
            ],
            "defaultValue": "allowedIPAddress"
        },
        "allowedIPAddresses": {
            "type": "string",
            "metadata": {
                "description": "The sourceAddressPrefixes allowed to connect to this deployment"
            },
            "defaultValue": ""
        },
        "clientRootCertName": {
            "type": "string",
            "metadata": {
                "description": "The name of the client root certificate used to authenticate VPN clients. This is a common name used to identify the root cert."
            },
            "defaultValue": ""
        },
        "clientRootCertData": {
            "type": "string",
            "metadata": {
                "description": "Client root certificate data used to authenticate VPN clients."
            },
            "defaultValue": ""
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        }
    },
    "variables": {
        "storageAccountName": "[concat(uniquestring(resourceGroup().id, parameters('utcValue')))]",
        
        "virtualNetworkNameA": "vnet-office",
        "virtualNetworkAddressRangeA": "172.18.0.0/16",
        "subnetName1": "snet-servers",
        "subnetRange1": "172.18.38.0/24",
        "subnetRef1": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkNameA'), variables('subnetName1'))]",
        "subnetName2": "snet-workstations",
        "subnetRange2": "172.18.39.0/24",
        "subnetRef2": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkNameA'), variables('subnetName2'))]",
        "subnetName3": "GatewaySubnet",
        "subnetRange3": "172.18.40.0/24",
        "subnetRef3": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkNameA'), variables('subnetName3'))]",
        
        "virtualNetworkGateway": "vnetgw-mordor",
        "vpnClientAddressPoolPrefix": "192.168.5.0/24",
        
        "virtualNetworkNameB": "vnet-attacker",
        "virtualNetworkAddressRangeB": "10.10.0.0/16",
        "subnetName4": "snet-attacker",
        "subnetRange4": "10.10.10.0/24",
        "subnetRef4": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkNameB'), variables('subnetName4'))]",

        "artifactsBlacksmithLocation": "https://raw.githubusercontent.com/hunters-forge/Blacksmith/master/",

        "dockerInstallScript": "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/bash/Install-Docker.sh')]",
        "prepareBoxScript": "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/powershell/misc/Prepare-Box.ps1')]",
        "enableWinAuditCategories": "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/powershell/auditing/Enable-WinAuditCategories.ps1')]",
        "enablePowerShellLoggingScript": "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/powershell/auditing/Enable-PowerShell-Logging.ps1')]",
        "installAgentScript": "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/powershell/endpoint-software/Install-Endpoint-Agent.ps1')]",
        "downloadSACLScript": "https://raw.githubusercontent.com/hunters-forge/Set-AuditRule/master/Set-AuditRule.ps1",
        "setSACLScript": "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/powershell/auditing/Set-SACLs.ps1')]",
        "setIPAddressScript": "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/powershell/misc/Set-StaticIP.ps1')]", 

        "c2SetupScript": "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/bash/Install-C2s.sh')]",

        "endpointsDefault": [
            {
                "tag": "domainController",
                "vmName": "MORDORDC",
                "os": "windows",
                "subnetref": "[variables('subnetRef1')]",
                "ipAddress": "172.18.38.5",
                "vmSize": "[parameters('windowsServerVmSize')]",
                "publisher": "MicrosoftWindowsServer",
                "offer": "WindowsServer",
                "sku": "[parameters('windowsServerSKU')]",
                "version": "[parameters('windowsServerVersion')]"
            },
            {
                "tag": "c2",
                "vmName": "TEAMSERVER",
                "os": "linux",
                "subnetref": "[variables('subnetRef4')]",
                "ipAddress": "10.10.10.5",
                "vmSize": "[parameters('linuxVmSize')]",
                "publisher": "Canonical",
                "offer": "UbuntuServer",
                "sku": "[parameters('ubuntuSKU')]",
                "version": "latest"
            }
        ],

        "copy": [
            {
                "name": "endpointsDynamic",
                "count": "[parameters('numberOfWorkstations')]",
                "input": {
                    "tag": "workstation",
                    "vmName": "[concat('WORKSTATION',copyIndex('endpointsDynamic',5))]",
                    "os": "windows",
                    "subnetref": "[variables('subnetRef2')]",
                    "ipAddress": "[concat('172.18.39.',copyIndex('endpointsDynamic',5))]",
                    "vmSize": "[parameters('windowsDesktopVmSize')]",
                    "publisher": "MicrosoftWindowsDesktop",
                    "offer": "Windows-10",
                    "sku": "[parameters('windowsDesktopSKU')]",
                    "version": "[parameters('windowsDesktopVersion')]"
                } 
            }
        ],

        "endpointsAll": "[concat(variables('endpointsDefault'), variables('endpointsDynamic'))]",        
        "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                    {
                        "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                        "keyData": "[parameters('linuxAdminKey')]"
                    }
                ]
            }
        }
    },
    "resources": [
        {
            "name": "[variables('storageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2018-11-01",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "Storage",
            "properties": {}
        },
        {
            "name": "deployAzureSentinel2Go",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri('https://raw.githubusercontent.com/OTRF/','Azure-Sentinel2Go/master/azuredeploy.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "workspaceName": {
                        "value": "WIN10AD"
                    },
                    "enableDataConnectorsKind": {
                        "value": ["SecurityInsightsSecurityEventCollectionConfiguration"]
                    }, 
                    "setSecurityCollectionTier": {
                        "value": "All"
                    },
                    "enableWinEventProviders": {
                        "value": [
                            "System",
                            "Microsoft-Windows-Sysmon/Operational",
                            "Microsoft-Windows-TerminalServices-RemoteConnectionManager/Operational",
                            "Microsoft-Windows-Bits-Client/Operational",
                            "Microsoft-Windows-TerminalServices-LocalSessionManager/Operational",
                            "Directory Service",
                            "Microsoft-Windows-DNS-Client/Operational",
                            "Microsoft-Windows-Windows Firewall With Advanced Security/Firewall",
                            "Windows PowerShell",
                            "Microsoft-Windows-PowerShell/Operational",
                            "Microsoft-Windows-WMI-Activity/Operational"
                        ]
                    }
                }
            }
        },
        {
            "condition": "[and(equals(parameters('accessMode'), 'allowedIPAddress'), not(empty(parameters('allowedIPAddresses'))))]",
            "comments": "Default Network Security Group for Windows endpoints",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-08-01",
            "name": "nsg-rdpallow",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-3389",
                        "properties": {
                            "priority": 100,
                            "access": "Allow",
                            "direction": "Inbound",
                            "destinationPortRange": "3389",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "[parameters('allowedIPAddresses')]",
                            "destinationAddressPrefix": "*"
                        }
                    }
                ]
            }
        },
        {
            "condition": "[and(and(equals(parameters('accessMode'), 'allowedIPAddress'), not(empty(parameters('allowedIPAddresses')))),not(empty(parameters('c2Framework'))))]",
            "comments": "Default Network Security Group for Linux endpoints",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-08-01",
            "name": "nsg-sshallow",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-22",
                        "properties": {
                            "priority": 101,
                            "access": "Allow",
                            "direction": "Inbound",
                            "destinationPortRange": "22",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "[parameters('allowedIPAddresses')]",
                            "destinationAddressPrefix": "*"
                        }
                    }
                ]
            }
        },
        {
            "condition": "[and(equals(parameters('accessMode'), 'pointToSiteVPN'), and(not(empty(parameters('clientRootCertName'))),not(empty(parameters('clientRootCertData')))))]",
            "name": "[variables('virtualNetworkNameA')]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-11-01",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('virtualNetworkAddressRangeA')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName1')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetRange1')]"
                        }
                    },
                    {
                        "name": "[variables('subnetName2')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetRange2')]"
                        }
                    },
                    {
                        "name": "[variables('subnetName3')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetRange3')]"
                        }
                    }
                ]
            }
        },
        {
            "condition": "[and(equals(parameters('accessMode'), 'allowedIPAddress'), not(empty(parameters('allowedIPAddresses'))))]",
            "name": "[variables('virtualNetworkNameA')]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-11-01",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('virtualNetworkAddressRangeA')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName1')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetRange1')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-rdpallow')]"
                            }
                        }
                    },
                    {
                        "name": "[variables('subnetName2')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetRange2')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-rdpallow')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "condition": "[and(equals(parameters('accessMode'), 'pointToSiteVPN'), and(not(empty(parameters('clientRootCertName'))),not(empty(parameters('clientRootCertData')))))]",
            "name": "[variables('virtualNetworkNameB')]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-11-01",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('virtualNetworkAddressRangeB')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName4')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetRange4')]"
                        }
                    }
                ]
            }
        },
        {
            "condition": "[and(equals(parameters('accessMode'), 'allowedIPAddress'), not(empty(parameters('allowedIPAddresses'))))]",
            "name": "[variables('virtualNetworkNameB')]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-11-01",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('virtualNetworkAddressRangeB')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName4')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetRange4')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-sshallow')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "condition": "[and(equals(parameters('accessMode'), 'pointToSiteVPN'), and(not(empty(parameters('clientRootCertName'))),not(empty(parameters('clientRootCertData')))))]",
            "name": "pip-gateway",
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2018-11-01",
            "location": "[parameters('location')]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[concat('mordor', '-', uniquestring(resourceGroup().id, parameters('utcValue')))]"
                }
            }
        },
        {
            "condition": "[and(equals(parameters('accessMode'), 'pointToSiteVPN'), and(not(empty(parameters('clientRootCertName'))),not(empty(parameters('clientRootCertData')))))]",
            "name": "[variables('virtualNetworkGateway')]",
            "type": "Microsoft.Network/virtualNetworkGateways",
            "apiVersion": "2019-11-01",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', 'pip-gateway')]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkNameA'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('subnetRef3')]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses','pip-gateway')]"
                            }
                        },
                        "name": "vnetGatewayConfig"
                    }
                ],
                "sku": {
                    "name": "VpnGw1",
                    "tier": "VpnGw1"
                },
                "gatewayType": "Vpn",
                "vpnType": "RouteBased",
                "enableBgp": false,
                "vpnClientConfiguration": {
                    "vpnClientAddressPool": {
                        "addressPrefixes": [
                            "[variables('vpnClientAddressPoolPrefix')]"
                        ]
                    },
                    "vpnClientRootCertificates": [
                        {
                            "name": "[parameters('clientRootCertName')]",
                            "properties": {
                                "PublicCertData": "[parameters('clientRootCertData')]"
                            }
                        }
                    ],
                    "vpnClientProtocols": [
                        "OpenVPN"
                    ]
                }
            }
        },
        {
            "name": "[concat('nic-', variables('endpointsAll')[copyIndex('vmNetworkInterfaceCopy')].vmName)]",
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-11-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkNameA'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkNameB'))]"
            ],
            "copy": {
                "name": "vmNetworkInterfaceCopy",
                "count": "[length(variables('endpointsAll'))]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[variables('endpointsAll')[copyIndex('vmNetworkInterfaceCopy')].ipAddress]",
                            "subnet": {
                                "id": "[variables('endpointsAll')[copyIndex('vmNetworkInterfaceCopy')].subnetref]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "name": "vnet-office/peering-to-remote-vnet-attacker",
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2019-11-01",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkNameA'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkNameB'))]",
                "[resourceId('Microsoft.Network/virtualNetworkGateways/', variables('virtualNetworkGateway'))]",
                "UpdateVNetDNS"
            ],
            "location": "[parameters('location')]",
            "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": false,
                "allowGatewayTransit": true,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkNameB'))]"
                }
            }
        },
        {
            "name": "vnet-attacker/peering-to-remote-vnet-office",
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2019-11-01",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkNameA'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkNameB'))]",
                "[resourceId('Microsoft.Network/virtualNetworkGateways/', variables('virtualNetworkGateway'))]",
                "UpdateVNetDNS"
            ],
            "location": "[parameters('location')]",
            "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": false,
                "allowGatewayTransit": false,
                "useRemoteGateways": true,
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkNameA'))]"
                }
            }
        },
        {
            "name": "[variables('endpointsAll')[copyIndex('vmVMCopy')].vmName]",
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-12-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic-', variables('endpointsAll')[copyIndex('vmVMCopy')].vmName))]"
            ],
            "copy": {
                "name": "vmVMCopy",
                "count": "[length(variables('endpointsAll'))]"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('endpointsAll')[copyIndex('vmVMCopy')].vmSize]"
                },
                "osProfile": {
                    "computerName": "[variables('endpointsAll')[copyIndex('vmVMCopy')].vmName]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "linuxConfiguration": "[if(equals(variables('endpointsAll')[copyIndex('vmVMCopy')].os, 'linux'), if(equals(parameters('linuxAuthenticationType'), 'password'), json('null'), variables('linuxConfiguration')), json('null'))]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('endpointsAll')[copyIndex('vmVMCopy')].publisher]",
                        "offer": "[variables('endpointsAll')[copyIndex('vmVMCopy')].offer]",
                        "sku": "[variables('endpointsAll')[copyIndex('vmVMCopy')].sku]",
                        "version": "[variables('endpointsAll')[copyIndex('vmVMCopy')].version]"
                    },
                    "osDisk": {
                        "createOption": "FromImage"
                    },
                    "dataDisks": []
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('nic-', variables('endpointsAll')[copyIndex('vmVMCopy')].vmName))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
                    }
                }
            },
            "resources": [
                {
                    "condition": "[equals(variables('endpointsAll')[copyIndex('vmVMCopy')].os, 'windows')]",
                    "name": "AntiMalware",
                    "type": "extensions",
                    "apiVersion": "2019-12-01",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', variables('endpointsAll')[copyIndex('vmVMCopy')].vmName)]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "IaaSAntimalware",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "AntimalwareEnabled": "true",
                            "Exclusions": {
                                "Extensions": ".bat;.exe;.dll;.ps1;.sct;.vbs;.hta;.py;.tmp;.csproj;.scr",
                                "Paths": "C:\\",
                                "Processes": "powershell.exe"
                            },
                            "RealtimeProtectionEnabled": "false",
                            "ScheduledScanSettings": {
                                "isEnabled": "false",
                                "scanType": "Quick",
                                "day": "8",
                                "time": "120"
                            }
                        },
                        "protectedSettings": null
                    }
                },
                {
                    "condition": "[equals(variables('endpointsAll')[copyIndex('vmVMCopy')].os, 'windows')]",
                    "name": "Microsoft.Azure.NetworkWatcher",
                    "type": "extensions",
                    "apiVersion": "2019-12-01",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', variables('endpointsAll')[copyIndex('vmVMCopy')].vmName)]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.Azure.NetworkWatcher",
                        "type": "NetworkWatcherAgentWindows",
                        "typeHandlerVersion": "1.4",
                        "autoUpgradeMinorVersion": true
                    }
                }
            ]
        },
        {
            "condition": "[equals(variables('endpointsAll')[copyIndex('InitialSetUpWKSCopy')].tag, 'workstation')]",
            "name": "[concat(variables('endpointsAll')[copyIndex('InitialSetUpWKSCopy')].vmName, '/SetUpWKS')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2019-12-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('endpointsAll')[copyIndex('InitialSetUpWKSCopy')].vmName)]"
            ],
            "copy": {
                "name": "InitialSetUpWKSCopy",
                "count": "[length(variables('endpointsAll'))]"
            },
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.8",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/OTRF/mordor-labs/master/environments/windows/shire/scripts/Set-Initial-Settings.ps1",
                        "[variables('prepareBoxScript')]",
                        "[variables('enableWinAuditCategories')]",
                        "[variables('enablePowerShellLoggingScript')]",
                        "[variables('installAgentScript')]",
                        "[variables('downloadSACLScript')]",
                        "[variables('setSACLScript')]",
                        "[variables('setIPAddressScript')]"
                    ],
                    "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ./Set-Initial-Settings.ps1', ' ', '-ServerAddresses', ' ', variables('endpointsAll')[0].ipAddress)]"
                },
                "protectedSettings": {}
            }
        },
        {
            "name": "[concat(variables('endpointsAll')[1].vmName, '/SetUpC2')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2019-12-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/', variables('endpointsAll')[1].vmName)]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.1",
                "autoUpgradeMinorVersion": true,
                "settings": {},
                "protectedSettings": {
                    "commandToExecute": "[concat('bash Install-C2s.sh -r', ' ', parameters('c2Framework'))]",
                    "fileUris": [
                        "[variables('c2SetupScript')]",
                        "[variables('dockerInstallScript')]"
                    ]
                }
            }
        },
        {
            "condition": "[equals(variables('endpointsAll')[copyIndex('LogAnalyticsAgentCopy')].os, 'windows')]",
            "name": "[concat(variables('endpointsAll')[copyIndex('LogAnalyticsAgentCopy')].vmName,'/LogAnalytics.Agent')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2019-12-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('endpointsAll')[copyIndex('LogAnalyticsAgentCopy')].vmName, 'joindomain')]"
            ],
            "copy": {
                "name": "LogAnalyticsAgentCopy",
                "count": "[length(variables('endpointsAll'))]"
            },
            "properties": {
                "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                "type": "MicrosoftMonitoringAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "workspaceId": "[reference('deployAzureSentinel2Go').outputs.workspaceIdOutput.value]"
                },
                "protectedSettings": {
                    "workspaceKey": "[reference('deployAzureSentinel2Go').outputs.workspaceKeyOutput.value]"
                }
            }
        }
    ],
    "outputs": {
        "storageAccountName": {
            "type": "string",
            "value": "[variables('storageAccountName')]"
        },
        "storageAccountUri": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
        },
        "endpointsDeployed": {
            "type": "array",
            "value": "[variables('endpointsAll')]"
        }
    }
}